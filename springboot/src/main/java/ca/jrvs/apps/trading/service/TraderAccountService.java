package ca.jrvs.apps.trading.service;

import ca.jrvs.apps.trading.dao.AccountDao;
import ca.jrvs.apps.trading.dao.PositionDao;
import ca.jrvs.apps.trading.dao.QuoteDao;
import ca.jrvs.apps.trading.dao.SecurityOrderDao;
import ca.jrvs.apps.trading.dao.TraderDao;
import ca.jrvs.apps.trading.model.domain.Account;
import ca.jrvs.apps.trading.model.domain.Position;
import ca.jrvs.apps.trading.model.domain.Trader;
import ca.jrvs.apps.trading.model.views.TraderAccountView;
import java.util.List;
import java.util.Optional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

@Service
public class TraderAccountService {

  private static final Logger logger = LoggerFactory.getLogger(QuoteDao.class);

  private TraderDao traderDao;
  private AccountDao accountDao;
  private PositionDao positionDao;
  private SecurityOrderDao securityOrderDao;

  public TraderAccountService(TraderDao traderDao, AccountDao accountDao, PositionDao positionDao,
      SecurityOrderDao securityOrderDao) {
    this.traderDao = traderDao;
    this.accountDao = accountDao;
    this.positionDao = positionDao;
    this.securityOrderDao = securityOrderDao;
  }

  /**
   * Create a new trader an initialize a new account with 0 amount - validate user input (all fields
   * must be non empty) - create a trader - create an account - create, setup, and return a new
   * traderAccountView
   * <p>
   * Assumption: to simplify the logic, each trader has only one account where traderId ==
   * accountId
   *
   * @return
   * @params trader cannot be null. All fields cannot be null except for id (auto-generated by db)
   */
  public TraderAccountView createTraderAndAccount(Trader trader) {
    if (trader == null) {
      throw new IllegalArgumentException("Trader cannot be null");
    }
    Trader trader1 = traderDao.save(trader);

    Account account = new Account();
    account.setTrader_id(trader1.getId());
    account.setAmount(0.0);
    Account account1 = accountDao.save(account);

    return new TraderAccountView(trader1, account1);
  }

  /**
   * A trader can be deleted iff it has no open position and 0 cash balance - validate trader ID -
   * get trader account by traderId and check account balance - get positions by accountId and check
   * positions - delete all securityOrders, account, trader (in this order)
   *
   * @param traderId must not be null
   */
  public void deleteTraderById(Integer traderId) {
    Optional<Account> account = accountDao.findByTraderId(traderId);
    logger.info(account.toString());
    if (traderId == null || !traderDao.existsById(traderId)) {
      throw new IllegalArgumentException("Unable to delete Trader.");
    }

    List<Position> positions = positionDao.findById(account.get().getId());
    if (account.get().getAmount() == 0 && (positions == null || positions.size() == 0)) {
      securityOrderDao.deleteById(traderId);
      accountDao.deleteById(traderId);
      traderDao.deleteById(traderId);
    }
  }

  /**
   * Deposit a fund to an account by traderId - validate user input - account =
   * accountDao.findByTraderId - accountDao.updateAmountById
   *
   * @param traderId
   * @param fund
   * @return
   */
  public Account deposit(Integer traderId, Double fund) {
    if (traderId == null || traderId < 0 || fund < 0) {
      throw new IllegalArgumentException("Invalid input for deposit.");
    }
    Account account = accountDao.findByTraderId(traderId).get();
    account.setAmount(fund + account.getAmount());
    accountDao.save(account);
    return account;
  }

  /**
   * Withdraw a fund to an account by traderId
   * <p>
   * - validate user input - account = accountDao.findByTraderId - accountDao.updateAmountById
   *
   * @param traderId
   * @param fund
   * @return
   */
  public Account withdraw(Integer traderId, Double fund) {
    if (traderId == null || traderId < 0 || fund < 0) {
      throw new IllegalArgumentException("Invalid input for deposit.");
    }
    Account account = accountDao.findByTraderId(traderId).get();
    if (fund > account.getAmount()) {
      throw new IllegalArgumentException("Withdrawing an amount more than in account.");
    }
    account.setAmount(account.getAmount() - fund);
    accountDao.save(account);
    return account;
  }
}
